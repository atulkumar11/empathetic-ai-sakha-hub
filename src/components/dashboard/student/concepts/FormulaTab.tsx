
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Progress } from '@/components/ui/progress';
import { 
  InfoIcon, 
  PlayCircle, 
  Download, 
  Lightbulb, 
  Sparkles, 
  CopyCheck, 
  RefreshCcw, 
  AlertCircle, 
  CheckCircle2
} from 'lucide-react';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { useToast } from '@/hooks/use-toast';

interface FormulaData {
  id: string;
  title: string;
  subject: string;
  description: string;
  realLifeApplication: string;
  formula: string;
  variables: {
    symbol: string;
    meaning: string;
    unit: string;
  }[];
  derivation?: string;
  visualRepresentation?: string;
  examples: {
    id: string;
    problem: string;
    solution: string;
    steps: string[];
    hint1?: string;
    hint2?: string;
    hint3?: string;
  }[];
  commonMistakes: string[];
  relatedFormulas: {
    id: string;
    name: string;
    formula: string;
  }[];
}

// Mock data for formula
const formulaData: FormulaData = {
  id: "ohms-law",
  title: "Ohm's Law",
  subject: "Physics",
  description: "Ohm's Law states that the current through a conductor between two points is directly proportional to the voltage across the two points.",
  realLifeApplication: "Used to calculate current in electric circuits, designing electrical systems, and troubleshooting electronic devices.",
  formula: "V = I × R",
  variables: [
    { symbol: "V", meaning: "Voltage", unit: "Volts (V)" },
    { symbol: "I", meaning: "Current", unit: "Amperes (A)" },
    { symbol: "R", meaning: "Resistance", unit: "Ohms (Ω)" }
  ],
  derivation: "Ohm's Law was formulated by Georg Ohm in 1827 through experimental observations. He found that the current flowing through a conductor was proportional to the voltage applied, with the constant of proportionality being the resistance.",
  visualRepresentation: "circuit-diagram.png",
  examples: [
    {
      id: "example1",
      problem: "If a circuit has a resistance of 5 Ω and a voltage of 10 V, what is the current in the circuit?",
      solution: "I = V/R = 10/5 = 2 A",
      steps: [
        "Identify the known values: V = 10 V, R = 5 Ω",
        "Rearrange Ohm's Law to solve for I: I = V/R",
        "Substitute the values: I = 10 V / 5 Ω = 2 A"
      ],
      hint1: "Use Ohm's Law formula and identify what you know",
      hint2: "Rearrange the formula to isolate the unknown variable",
      hint3: "Remember to keep track of your units"
    },
    {
      id: "example2",
      problem: "A current of 0.5 A flows through a resistor when a voltage of 9 V is applied. What is the resistance?",
      solution: "R = V/I = 9/0.5 = 18 Ω",
      steps: [
        "Identify the known values: V = 9 V, I = 0.5 A",
        "Rearrange Ohm's Law to solve for R: R = V/I",
        "Substitute the values: R = 9 V / 0.5 A = 18 Ω"
      ]
    }
  ],
  commonMistakes: [
    "Forgetting to convert units (e.g., using kΩ instead of Ω)",
    "Confusing current and voltage in the formula",
    "Applying Ohm's Law to non-ohmic devices"
  ],
  relatedFormulas: [
    {
      id: "power-law",
      name: "Electrical Power",
      formula: "P = V × I"
    },
    {
      id: "kirchhoff",
      name: "Kirchhoff's Current Law",
      formula: "∑I = 0"
    }
  ]
};

const FormulaTab: React.FC = () => {
  const [activeExample, setActiveExample] = useState(0);
  const [showDerivation, setShowDerivation] = useState(false);
  const [mastery, setMastery] = useState(30);
  const [userAnswers, setUserAnswers] = useState<string[]>([]);
  const [showingSolution, setShowingSolution] = useState(false);
  const [hintLevel, setHintLevel] = useState(0);
  const [autoGeneratedProblem, setAutoGeneratedProblem] = useState<string | null>(null);
  const [studyTime, setStudyTime] = useState(0);
  const { toast } = useToast();

  const currentExample = formulaData.examples[activeExample];
  
  const handleUpdateMastery = (increase: boolean) => {
    const change = increase ? 10 : -5;
    const newMastery = Math.max(0, Math.min(100, mastery + change));
    setMastery(newMastery);
    
    toast({
      title: increase ? "Mastery increased" : "Mastery decreased",
      description: `Your understanding is now at ${newMastery}%`,
      variant: increase ? "default" : "destructive",
    });
  };
  
  const handleNextExample = () => {
    if (activeExample < formulaData.examples.length - 1) {
      setActiveExample(activeExample + 1);
    } else {
      setActiveExample(0);
    }
    setUserAnswers([]);
    setShowingSolution(false);
    setHintLevel(0);
  };
  
  const handleGenerateProblem = () => {
    // In a real implementation, this would call an AI backend
    const problems = [
      "If a circuit has a resistance of 12 Ω and a current of 1.5 A, what is the voltage?",
      "A heating element draws 3 A when connected to a 220 V source. What is its resistance?",
      "If a 9 V battery is connected to a circuit with a resistance of 4.5 Ω, what is the current?"
    ];
    
    setAutoGeneratedProblem(problems[Math.floor(Math.random() * problems.length)]);
    setUserAnswers([]);
    setShowingSolution(false);
    toast({
      title: "New problem generated",
      description: "Try solving this new example",
    });
  };
  
  const handleShowHint = () => {
    if (hintLevel < 3) {
      setHintLevel(hintLevel + 1);
    }
  };
  
  const getHintText = () => {
    const hints = [
      currentExample?.hint1,
      currentExample?.hint2,
      currentExample?.hint3
    ];
    
    return hints[hintLevel - 1] || "Identify the variables in the problem and use Ohm's Law";
  };
  
  const handleDownloadNotes = () => {
    toast({
      title: "Notes downloaded",
      description: "Formula summary and examples have been saved",
    });
  };
  
  const handleShowSolution = () => {
    setShowingSolution(true);
  };
  
  const handleCheckStep = (stepIndex: number, answer: string) => {
    const newAnswers = [...userAnswers];
    newAnswers[stepIndex] = answer;
    setUserAnswers(newAnswers);
    
    // Simple validation - in real app would use proper validation
    const isCorrect = answer.length > 0;
    
    toast({
      title: isCorrect ? "Correct step!" : "Try again",
      description: isCorrect 
        ? "Great job! You're on the right track." 
        : "Think about how to apply the formula here",
      variant: isCorrect ? "default" : "destructive",
    });
    
    if (isCorrect && stepIndex === currentExample.steps.length - 1) {
      handleUpdateMastery(true);
    }
  };

  return (
    <div className="space-y-6">
      {/* Formula Introduction Block */}
      <Card>
        <CardHeader className="pb-3">
          <div className="flex justify-between items-start">
            <div>
              <CardTitle className="text-xl">{formulaData.title}</CardTitle>
              <div className="flex flex-wrap gap-2 mt-2">
                <Badge variant="secondary">{formulaData.subject}</Badge>
                <Badge variant="outline">Chapter: Electricity</Badge>
                <Badge variant="outline">NEET</Badge>
              </div>
            </div>
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button variant="ghost" size="icon">
                    <InfoIcon className="h-5 w-5" />
                  </Button>
                </TooltipTrigger>
                <TooltipContent className="w-80">
                  <p className="font-medium">Real-Life Application</p>
                  <p className="text-sm mt-1">{formulaData.realLifeApplication}</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </div>
        </CardHeader>
        <CardContent>
          <p className="text-muted-foreground mb-4">{formulaData.description}</p>
          
          {/* Formula Display with LaTeX-style formatting */}
          <div className="bg-slate-50 dark:bg-slate-900 p-4 rounded-md flex justify-center items-center my-6">
            <div className="text-2xl font-semibold select-none">
              {formulaData.formula.split('').map((char, index) => {
                if (char === '×') return <span key={index} className="mx-2">×</span>;
                return (
                  <TooltipProvider key={index}>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <span className="cursor-help">
                          {char}
                        </span>
                      </TooltipTrigger>
                      {formulaData.variables.map(v => 
                        v.symbol === char && (
                          <TooltipContent key={v.symbol} className="flex flex-col">
                            <span className="font-medium">{v.meaning}</span>
                            <span className="text-xs">Unit: {v.unit}</span>
                          </TooltipContent>
                        )
                      )}
                    </Tooltip>
                  </TooltipProvider>
                );
              })}
            </div>
          </div>
          
          {/* Variable definitions */}
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-2 mb-4">
            {formulaData.variables.map((variable) => (
              <div key={variable.symbol} className="border rounded p-2 flex items-center gap-2">
                <div className="font-semibold text-lg">{variable.symbol}</div>
                <div>
                  <div className="text-sm">{variable.meaning}</div>
                  <div className="text-xs text-muted-foreground">{variable.unit}</div>
                </div>
              </div>
            ))}
          </div>
          
          {/* Derivation toggle */}
          <Button 
            variant="outline" 
            className="w-full mt-2" 
            onClick={() => setShowDerivation(!showDerivation)}
          >
            {showDerivation ? "Hide Derivation" : "Show Derivation"}
          </Button>
          
          {showDerivation && (
            <div className="mt-4 bg-muted/50 rounded-md p-3 text-sm">
              <h4 className="font-medium mb-2">Derivation</h4>
              <p>{formulaData.derivation}</p>
              
              {/* Visual representation placeholder */}
              <div className="mt-4 border rounded-md p-4 flex justify-center items-center h-40 bg-muted/30">
                <div className="text-center text-muted-foreground">
                  <div className="mb-2">Visual Representation</div>
                  <Button variant="outline" size="sm">
                    <PlayCircle className="h-4 w-4 mr-1" /> View Animation
                  </Button>
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Interactive Problem Practice Section */}
      <Card>
        <CardHeader>
          <CardTitle className="flex justify-between items-center">
            <span>Practice Problems</span>
            <Button variant="outline" size="sm" onClick={handleGenerateProblem}>
              <RefreshCcw className="h-4 w-4 mr-1" /> Generate New Problem
            </Button>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-6">
            {/* Auto-generated problem or current example */}
            <div className="bg-white border rounded-md p-4">
              <div className="font-medium mb-2">Problem:</div>
              <p>{autoGeneratedProblem || currentExample.problem}</p>
              
              {/* Steps input section */}
              <div className="mt-4 space-y-3">
                <div className="font-medium">Solution Steps:</div>
                
                {!showingSolution ? (
                  <>
                    {currentExample.steps.map((step, index) => (
                      <div key={index} className="border rounded-md p-3">
                        <div className="font-medium text-sm mb-2">Step {index + 1}:</div>
                        <div className="flex gap-2">
                          <textarea 
                            className="flex-1 border p-2 rounded-md h-20 text-sm"
                            placeholder={`Enter your solution for step ${index + 1}...`}
                            value={userAnswers[index] || ''}
                            onChange={(e) => {
                              const newAnswers = [...userAnswers];
                              newAnswers[index] = e.target.value;
                              setUserAnswers(newAnswers);
                            }}
                          />
                          <Button 
                            className="self-start"
                            onClick={() => handleCheckStep(index, userAnswers[index] || '')}
                          >
                            Check
                          </Button>
                        </div>
                      </div>
                    ))}
                    
                    {/* Hint section */}
                    <div className="flex gap-2 mt-4">
                      <Button variant="outline" onClick={handleShowHint}>
                        <Lightbulb className="h-4 w-4 mr-1" /> 
                        {hintLevel === 0 ? "Show Hint" : `Next Hint (${hintLevel}/3)`}
                      </Button>
                      <Button variant="outline" onClick={handleShowSolution}>
                        <CheckCircle2 className="h-4 w-4 mr-1" /> Show Solution
                      </Button>
                    </div>
                    
                    {hintLevel > 0 && (
                      <div className="bg-amber-50 border-amber-200 border rounded-md p-3 text-sm">
                        <div className="font-medium flex items-center gap-1">
                          <Sparkles className="h-4 w-4 text-amber-600" />
                          <span>Hint Level {hintLevel}:</span>
                        </div>
                        <p className="mt-1 text-amber-800">{getHintText()}</p>
                      </div>
                    )}
                  </>
                ) : (
                  // Solution display
                  <div className="bg-green-50 border-green-200 border rounded-md p-3">
                    <div className="font-medium flex items-center gap-2 mb-2">
                      <CopyCheck className="h-4 w-4 text-green-600" />
                      <span>Complete Solution</span>
                    </div>
                    
                    <div className="space-y-2">
                      {currentExample.steps.map((step, index) => (
                        <div key={index} className="flex gap-2 items-start">
                          <div className="bg-white h-6 w-6 rounded-full flex items-center justify-center text-sm font-medium border">
                            {index + 1}
                          </div>
                          <p>{step}</p>
                        </div>
                      ))}
                      <div className="mt-4 font-medium">
                        Final Answer: {currentExample.solution}
                      </div>
                    </div>
                    
                    <Button className="mt-4" onClick={handleNextExample}>
                      Try Another Example
                    </Button>
                  </div>
                )}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Mastery Progress Indicator */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card className="md:col-span-2">
          <CardHeader>
            <CardTitle>Hints & Strategy</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div>
                <h4 className="font-medium mb-2 flex items-center gap-2">
                  <AlertCircle className="h-4 w-4 text-amber-500" />
                  Common Mistakes
                </h4>
                <ul className="list-disc pl-5 space-y-1">
                  {formulaData.commonMistakes.map((mistake, index) => (
                    <li key={index} className="text-sm">{mistake}</li>
                  ))}
                </ul>
              </div>
              
              <div>
                <h4 className="font-medium mb-2 flex items-center gap-2">
                  <Lightbulb className="h-4 w-4 text-blue-500" />
                  Smart Strategy Suggestions
                </h4>
                <div className="bg-blue-50 rounded-md p-3">
                  <ul className="text-sm space-y-2">
                    <li>• Always identify all variables before applying the formula</li>
                    <li>• Check your units to ensure they match before calculations</li>
                    <li>• For complex circuits, break them down into simpler parts</li>
                    <li>• Remember that Ohm's Law applies only to ohmic conductors</li>
                  </ul>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader>
            <CardTitle>Your Progress</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div>
                <div className="flex justify-between text-sm mb-1">
                  <span>Understanding Level</span>
                  <span>
                    {mastery < 30 ? "🔄 Learning" : 
                     mastery < 70 ? "⚙️ Practicing" : 
                     "✅ Mastered"}
                  </span>
                </div>
                <Progress value={mastery} className="h-2" />
              </div>
              
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span>Accuracy</span>
                  <span>75%</span>
                </div>
                <div className="flex justify-between">
                  <span>Attempts</span>
                  <span>8</span>
                </div>
                <div className="flex justify-between">
                  <span>Time Spent</span>
                  <span>15 min</span>
                </div>
              </div>
              
              <div className="pt-2">
                <Button variant="outline" className="w-full" onClick={handleUpdateMastery.bind(null, true)}>
                  <CopyCheck className="h-4 w-4 mr-1" /> Mark as Understood
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Linked Content */}
      <Card>
        <CardHeader>
          <CardTitle>Related Content</CardTitle>
        </CardHeader>
        <CardContent>
          <Tabs defaultValue="formulas">
            <TabsList className="mb-4">
              <TabsTrigger value="formulas">Related Formulas</TabsTrigger>
              <TabsTrigger value="concepts">Next Concepts</TabsTrigger>
            </TabsList>
            <TabsContent value="formulas">
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                {formulaData.relatedFormulas.map((formula) => (
                  <Card key={formula.id} className="overflow-hidden">
                    <CardContent className="p-4">
                      <h3 className="font-medium">{formula.name}</h3>
                      <div className="bg-slate-50 dark:bg-slate-900 p-2 rounded-md text-center my-2">
                        <span className="text-lg">{formula.formula}</span>
                      </div>
                      <Button variant="outline" size="sm" className="w-full mt-2">
                        Study This Formula
                      </Button>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </TabsContent>
            <TabsContent value="concepts">
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <Card>
                  <CardContent className="p-4">
                    <h3 className="font-medium">Series and Parallel Circuits</h3>
                    <p className="text-sm text-muted-foreground my-2">Learn how to apply Ohm's Law in complex circuits</p>
                    <Button variant="outline" size="sm" className="w-full mt-2">
                      Study This Concept
                    </Button>
                  </CardContent>
                </Card>
                <Card>
                  <CardContent className="p-4">
                    <h3 className="font-medium">Electrical Power</h3>
                    <p className="text-sm text-muted-foreground my-2">Understand the relationship between voltage, current, and power</p>
                    <Button variant="outline" size="sm" className="w-full mt-2">
                      Study This Concept
                    </Button>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>
          </Tabs>
        </CardContent>
        <CardFooter>
          <Button variant="outline" className="w-full" onClick={handleDownloadNotes}>
            <Download className="h-4 w-4 mr-2" /> Download Formula Notes
          </Button>
        </CardFooter>
      </Card>
    </div>
  );
};

export default FormulaTab;
