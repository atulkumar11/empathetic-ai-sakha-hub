
import React, { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { MessageSquare, Send, Paperclip, ArrowUp, Clock, FileText, BookOpen } from 'lucide-react';
import { ScrollArea } from '@/components/ui/scroll-area';

interface Message {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  subject?: string;
  topic?: string;
}

interface AITutorChatProps {
  userProfile: any;
}

const SUBJECTS = ['Physics', 'Chemistry', 'Mathematics', 'Biology'];
const TOPICS = {
  'Physics': ['Mechanics', 'Thermodynamics', 'Electromagnetism', 'Optics', 'Modern Physics'],
  'Chemistry': ['Physical Chemistry', 'Organic Chemistry', 'Inorganic Chemistry', 'Analytical Chemistry'],
  'Mathematics': ['Calculus', 'Algebra', 'Geometry', 'Statistics', 'Trigonometry'],
  'Biology': ['Cell Biology', 'Genetics', 'Ecology', 'Human Physiology', 'Botany']
};

export const AITutorChat: React.FC<AITutorChatProps> = ({ userProfile }) => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      role: 'assistant',
      content: `Hi ${userProfile?.name || 'there'}! I'm your 24/7 AI Tutor. How can I help with your ${userProfile?.examPreparation || 'exam'} preparation today?`,
      timestamp: new Date(),
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [selectedSubject, setSelectedSubject] = useState<string | undefined>(undefined);
  const [selectedTopic, setSelectedTopic] = useState<string | undefined>(undefined);
  const [activeSession, setActiveSession] = useState<string | null>(null);
  
  const chatEndRef = useRef<HTMLDivElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const pastSessions = [
    { id: 'session1', title: 'Newton\'s Laws Q&A', date: '2 days ago', subject: 'Physics' },
    { id: 'session2', title: 'Chemical Bonding Help', date: '1 week ago', subject: 'Chemistry' },
    { id: 'session3', title: 'Integration Problems', date: '2 weeks ago', subject: 'Mathematics' },
  ];

  const suggestedQuestions = [
    "Can you explain Newton's Third Law?",
    "How do I balance chemical equations?",
    "Help me understand integration by parts",
    "What's the difference between mitosis and meiosis?"
  ];

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const handleSend = () => {
    if (!inputMessage.trim()) return;

    // Add user message
    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: inputMessage,
      timestamp: new Date(),
      subject: selectedSubject,
      topic: selectedTopic
    };
    
    setMessages([...messages, userMessage]);
    setInputMessage('');
    setIsTyping(true);
    
    // Simulate AI response after a delay
    setTimeout(() => {
      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: generateAIResponse(inputMessage, selectedSubject, selectedTopic),
        timestamp: new Date(),
      };
      
      setMessages(prev => [...prev, aiResponse]);
      setIsTyping(false);
    }, 1500);
  };

  const generateAIResponse = (message: string, subject?: string, topic?: string) => {
    // In a real app, this would be an API call to an AI service
    if (subject) {
      return `I'd be happy to help with your ${subject}${topic ? ' (' + topic + ')' : ''} question! Here's what I can tell you about "${message}":\n\nThis would be a detailed explanation tailored to your exam preparation needs. In a real implementation, this would be generated by connecting to an AI service that provides educational content specifically for ${userProfile?.examPreparation || 'your exams'}.`;
    }
    return `Thanks for your question! To provide a more targeted response, consider selecting a subject and topic. Here's a general answer to "${message}":\n\nThis would be a general explanation. For more specific help with your ${userProfile?.examPreparation || 'exam'} preparation, please specify the subject and topic you're studying.`;
  };

  const handleFileUpload = () => {
    fileInputRef.current?.click();
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (files && files.length > 0) {
      // Handle file upload logic here
      const fileName = files[0].name;
      setMessages([...messages, {
        id: Date.now().toString(),
        role: 'user',
        content: `Uploaded file: ${fileName}`,
        timestamp: new Date()
      }]);
      
      // Reset file input
      if (fileInputRef.current) fileInputRef.current.value = '';
    }
  };

  const handleSuggestedQuestion = (question: string) => {
    setInputMessage(question);
  };

  return (
    <div className="flex flex-col h-[calc(100vh-200px)] bg-background rounded-lg shadow-sm">
      <div className="flex flex-col sm:flex-row h-full">
        {/* Sidebar - Session History and Filters */}
        <div className="w-full sm:w-64 p-4 border-r border-border bg-muted/30">
          <Tabs defaultValue="sessions" className="w-full">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="sessions">Sessions</TabsTrigger>
              <TabsTrigger value="resources">Resources</TabsTrigger>
            </TabsList>
            
            <TabsContent value="sessions" className="mt-2">
              <h3 className="text-sm font-medium mb-2">Recent Sessions</h3>
              <ScrollArea className="h-[200px]">
                {pastSessions.map(session => (
                  <div 
                    key={session.id} 
                    className={`p-2 rounded-md mb-2 cursor-pointer hover:bg-accent ${activeSession === session.id ? 'bg-accent' : ''}`}
                    onClick={() => setActiveSession(session.id)}
                  >
                    <div className="flex justify-between items-center">
                      <span className="font-medium text-sm">{session.title}</span>
                      <Badge variant="outline" className="text-xs">{session.subject}</Badge>
                    </div>
                    <div className="flex items-center mt-1 text-xs text-muted-foreground">
                      <Clock className="h-3 w-3 mr-1" />
                      {session.date}
                    </div>
                  </div>
                ))}
              </ScrollArea>
            </TabsContent>
            
            <TabsContent value="resources" className="mt-2">
              <h3 className="text-sm font-medium mb-2">Study Resources</h3>
              <ScrollArea className="h-[200px]">
                <div className="space-y-2">
                  <div className="p-2 rounded-md border border-border hover:bg-accent cursor-pointer flex items-center">
                    <FileText className="h-4 w-4 mr-2 text-primary" />
                    <span className="text-sm">Mechanics Formula Sheet</span>
                  </div>
                  <div className="p-2 rounded-md border border-border hover:bg-accent cursor-pointer flex items-center">
                    <BookOpen className="h-4 w-4 mr-2 text-primary" />
                    <span className="text-sm">Organic Chemistry Notes</span>
                  </div>
                  <div className="p-2 rounded-md border border-border hover:bg-accent cursor-pointer flex items-center">
                    <FileText className="h-4 w-4 mr-2 text-primary" />
                    <span className="text-sm">Calculus Practice Problems</span>
                  </div>
                </div>
              </ScrollArea>
            </TabsContent>
          </Tabs>
          
          <div className="mt-6">
            <h3 className="text-sm font-medium mb-2">Filter by Subject</h3>
            <Select value={selectedSubject} onValueChange={setSelectedSubject}>
              <SelectTrigger>
                <SelectValue placeholder="Select a subject" />
              </SelectTrigger>
              <SelectContent>
                {SUBJECTS.map(subject => (
                  <SelectItem key={subject} value={subject}>{subject}</SelectItem>
                ))}
              </SelectContent>
            </Select>
            
            {selectedSubject && (
              <div className="mt-4">
                <h3 className="text-sm font-medium mb-2">Filter by Topic</h3>
                <Select value={selectedTopic} onValueChange={setSelectedTopic}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select a topic" />
                  </SelectTrigger>
                  <SelectContent>
                    {TOPICS[selectedSubject as keyof typeof TOPICS]?.map(topic => (
                      <SelectItem key={topic} value={topic}>{topic}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            )}
          </div>
        </div>
        
        {/* Main Chat Area */}
        <div className="flex-1 flex flex-col">
          {/* Chat Messages */}
          <ScrollArea className="flex-1 p-4">
            <div className="space-y-4">
              {messages.map((msg) => (
                <div 
                  key={msg.id} 
                  className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div 
                    className={`max-w-[80%] rounded-lg p-4 ${
                      msg.role === 'user'
                        ? 'bg-primary text-primary-foreground'
                        : 'bg-muted'
                    }`}
                  >
                    {msg.subject && (
                      <div className="mb-1 flex gap-1">
                        <Badge variant="secondary" className="text-xs">
                          {msg.subject}
                        </Badge>
                        {msg.topic && (
                          <Badge variant="outline" className="text-xs">
                            {msg.topic}
                          </Badge>
                        )}
                      </div>
                    )}
                    <div className="whitespace-pre-wrap">{msg.content}</div>
                    <div className="text-xs mt-1 opacity-70">
                      {msg.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                    </div>
                  </div>
                </div>
              ))}
              
              {isTyping && (
                <div className="flex justify-start">
                  <div className="bg-muted rounded-lg p-4">
                    <div className="flex space-x-2">
                      <div className="w-2 h-2 rounded-full bg-foreground/70 animate-bounce"></div>
                      <div className="w-2 h-2 rounded-full bg-foreground/70 animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                      <div className="w-2 h-2 rounded-full bg-foreground/70 animate-bounce" style={{ animationDelay: '0.4s' }}></div>
                    </div>
                  </div>
                </div>
              )}
              <div ref={chatEndRef} />
            </div>
          </ScrollArea>
          
          {/* Suggested Questions */}
          <div className="px-4 py-2 border-t border-border">
            <h4 className="text-sm font-medium mb-2">Suggested Questions:</h4>
            <div className="flex flex-wrap gap-2">
              {suggestedQuestions.map((question, i) => (
                <Button 
                  key={i} 
                  variant="outline" 
                  size="sm" 
                  onClick={() => handleSuggestedQuestion(question)}
                  className="text-xs"
                >
                  {question}
                </Button>
              ))}
            </div>
          </div>
          
          {/* Input Area */}
          <div className="p-4 border-t border-border">
            <div className="flex items-end gap-2">
              <div className="flex-1 relative">
                <Textarea
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  onKeyDown={handleKeyDown}
                  placeholder="Ask your question here..."
                  className="min-h-[80px] pr-10 resize-none"
                />
                <Button 
                  size="icon" 
                  variant="ghost" 
                  className="absolute bottom-2 right-2"
                  onClick={handleFileUpload}
                >
                  <Paperclip className="h-4 w-4" />
                </Button>
                <input 
                  type="file" 
                  ref={fileInputRef} 
                  onChange={handleFileChange} 
                  className="hidden" 
                />
              </div>
              <Button onClick={handleSend} className="flex-shrink-0">
                <Send className="h-4 w-4 mr-2" />
                Send
              </Button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
